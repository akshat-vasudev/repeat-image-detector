{"version":3,"sources":["City.js","ImageList.js","App.js","serviceWorker.js","index.js"],"names":["City","props","onClick","handleUserClick","city","ImageList","wrongImageCount","totalImageCount","class","className","buildings","length","_Els","map","building","i","key","href","id","target","address","percentOfWrongImages","images","image","idx","belongsToBuilding","url","caption","toFixed","getImageAndCityMarkup","App","useState","cities","updateCities","imageToCityMap","updateImageToCityMap","openOverlay","updateOpenOverlay","useEffect","a","fetch","geoGroupCall","json","geoGroupJSON","data","getGeoGeogroupByCity","getImagesForAllBuildingsInTheCity","fetchImages","allBuildingsInCity","allImages","then","buildingServiceResponse","buildingDataJSON","Object","keys","buildingIds","percentOfWrongImagesPerCity","window","scrollTo","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAUeA,G,MATJ,SAACC,GAER,OACI,6BAASC,QAASD,EAAME,iBACnBF,EAAMG,QC8CJC,EAlDC,SAACJ,GAEb,IAAIK,EAAkB,EAAGC,EAAkB,EAoC3C,MACI,CAAC,yBAAKC,MAAM,cAAX,aACD,sVAIA,6BAASC,UAAU,kBAxCK,SAACC,GACzB,GAAyB,IAAtBA,EAAUC,OACT,OACI,yBAAKF,UAAU,oBAAmB,yBAAKA,UAAU,eAAc,gCAKvE,IACIG,EAAOF,EAAUG,IAAI,SAACC,EAAUC,GAAO,OAE3C,6BAASC,IAAKD,GACd,yBAAKN,UAAU,iBACP,uBAAGQ,KAAI,0CAAqCH,EAASI,IAAMC,OAAO,UAAUL,EAASM,UAE7F,yBAAKX,UAAU,uBAAf,kBAAqDK,EAASO,qBAA9D,KACA,4BACCP,EAASQ,OAAOT,IAAI,SAACU,EAAOC,GAGzB,OAFAjB,IACIgB,EAAME,mBAAkBnB,IACpB,wBAAIU,IAAKQ,GACb,0BAAMf,UAAS,4BAAuBc,EAAME,qBAC5C,uBAAGN,OAAO,SAASF,KAAMM,EAAMG,KAAMH,EAAMI,QAAQhB,OAAO,EAAEY,EAAMI,QAAQ,0DAQlF,MAFc,CAAI,yBAAKX,IAAI,iBAAiBP,UAAU,kBAApC,iDAAoGH,EAAgBC,EAAgB,KAAKqB,QAAQ,GAAjJ,MAAJ,mBAAmKhB,IAa5KiB,CAAsB5B,EAAMS,cCS1BoB,MAlDf,WAAgB,IAAD,EACgBC,mBAAS,IADzB,mBACRC,EADQ,KACAC,EADA,OAEgCF,mBAAS,IAFzC,mBAERG,EAFQ,KAEQC,EAFR,OAG0BJ,oBAAS,GAHnC,mBAGRK,EAHQ,KAGKC,EAHL,KAKbC,oBAAU,YACkB,sCAAG,8BAAAC,EAAA,qEACAC,MAAM,cADN,cACrBC,EADqB,gBAEAA,EAAaC,OAFb,OAErBC,EAFqB,OAGzBV,EAAaU,EAAaC,MAHD,yCAAH,qDAKxBC,IACA,IAEF,IAeIC,EAAoC,SAAC1C,IAfvB,SAAd2C,EAAeC,GAAsD,IAAlClC,EAAiC,uDAAtB,EAAGmC,EAAmB,uDAAP,GAC/D,GAAGnC,IAAakC,EAAmBrC,OAEjC,OADAwB,EAAqBc,IACd,EAETT,MAAM,oBAAD,OAAqBQ,EAAmBlC,KAAaoC,KAAK,SAACC,GAC9DA,EAAwBT,OAAOQ,KAAK,SAACE,GACnCH,EAAS,sBAAOA,GAAP,YAAoBG,EAAiBR,OAE9CG,EAAYC,IAAsBlC,EAAUmC,OAQhDF,CADyB3C,EAAKiD,OAAOC,KAAKlD,GAAM,IAAImD,cASxD,OACE,0BAAM9C,UAAU,kBACd,qDACC2B,GAAe,yBAAK3B,UAAU,eAAeP,QAAS,WAAOmC,GAAmBD,KAAjE,KACfA,GAAe,kBAAC,EAAD,CAAW1B,UAAWwB,EAAgBsB,4BAvCxB,IAwC9B,6BAAS/C,UAAU,kBAVIuB,EAAOnB,IAAI,SAACT,EAAMW,GAAP,OAAc,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,KAAMiD,OAAOC,KAAKlD,GAAOD,gBAAiB,WACxGsD,OAAOC,SAAS,EAAE,GAClBvB,EAAqB,IACrBE,GAAkB,GAClBS,EAAkC1C,WC/BpBuD,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC,gB","file":"static/js/main.9a54be1c.chunk.js","sourcesContent":["import React from 'react';\nlet City = (props) => {\n\n    return (\n        <article onClick={props.handleUserClick}>\n            {props.city}\n        </article>\n    )\n}\n\nexport default City;","import React from 'react';\nlet ImageList = (props) => {\n\n    let wrongImageCount = 0, totalImageCount = 0;\n\n    let getImageAndCityMarkup = (buildings) => {\n        if(buildings.length ===  0){\n            return (\n                <div className=\"lds-css ng-scope\"><div className=\"lds-eclipse\"><div></div></div></div>\n            )\n        }\n\n        \n        let buildingMarkup = [''];\n        let _Els = buildings.map((building, i) => {return (\n            \n        <article key={i}>\n        <div className='building_name' >\n                <a href={`http://www.wework.com/buildings/${building.id}`} target='_blank'>{building.address}</a>\n        </div>\n        <div className='wrong_image_percent'>Repeat Images: {building.percentOfWrongImages}%</div>\n        <ul>\n        {building.images.map((image, idx) => {\n            totalImageCount++;\n            if(!image.belongsToBuilding)wrongImageCount++;\n            return (<li key={idx}>\n                <span className={`belongsToBuilding-${image.belongsToBuilding}`}></span>\n                <a target='_blank' href={image.url}>{image.caption.length>0?image.caption:<i>No Caption Provided</i>}</a>\n            </li>)})}\n        </ul>\n        </article>\n        )}\n        )\n        buildingMarkup = [<div key='percentpercity' className='percentPerCity'>Repeat images in all buildings of this city: {(wrongImageCount/totalImageCount*100).toFixed(2)}%</div>,..._Els];\n        \n        return buildingMarkup;\n        \n    }\n\n    return (\n        [<div class='disclaimer'>Disclaimer\n        <span>The images are classified as 'not belonging to building' (red dot) if the caption for that image contains \"Example Shown:\". \n        This is the only consistant parameter found across the dataset to determine if the image belongs to a specific building or if another buildings image is being used as a placeholder.\n        </span>\n        </div>,\n        <section className='list_of_images'>            \n            {getImageAndCityMarkup(props.buildings)}\n        </section>]\n    )\n}\n\nexport default ImageList;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport City from './City';\nimport ImageList from './ImageList';\n\nfunction App() {\n  let [cities, updateCities] = useState([]);\n  let [imageToCityMap, updateImageToCityMap] = useState([]);//{'123-123-12344':{address:'123',slug:'ertertert',images:[]}}\n  let [openOverlay, updateOpenOverlay] = useState(false);\n  let percentOfWrongImagesPerCity = 0;\n  useEffect(() => {\n      let getGeoGeogroupByCity = async () => {\n        let geoGroupCall = await fetch('/getCities');\n        let geoGroupJSON = await geoGroupCall.json();\n        updateCities(geoGroupJSON.data);\n      };\n      getGeoGeogroupByCity();\n    },[]);\n\n    let fetchImages = (allBuildingsInCity, building = 0, allImages = []) => {\n      if(building === allBuildingsInCity.length){\n        updateImageToCityMap(allImages);\n        return false;\n      }\n      fetch(`/getBuildingData/${allBuildingsInCity[building]}`).then((buildingServiceResponse) => {\n        buildingServiceResponse.json().then((buildingDataJSON) => {\n          allImages = [...allImages,...buildingDataJSON.data]\n          \n          fetchImages(allBuildingsInCity, ++building, allImages);\n        });\n      }); \n    }\n    \n\n    let getImagesForAllBuildingsInTheCity = (city) => {\n      let allBuildingsInCity = city[Object.keys(city)[0]].buildingIds;\n      fetchImages(allBuildingsInCity);\n    }\n\n    let renderCities = () => cities.map((city, i) =>  <City key={i} city={Object.keys(city)} handleUserClick={() => {\n      window.scrollTo(0,0);\n      updateImageToCityMap([]);\n      updateOpenOverlay(true);\n      getImagesForAllBuildingsInTheCity(city)}} />);\n  return (\n    <main className='parent_wrapper'>\n      <h1>Repeat Image Detector</h1>\n      {openOverlay && <div className='close_button' onClick={() => {updateOpenOverlay(!openOverlay)}}>X</div>}\n      {openOverlay && <ImageList buildings={imageToCityMap} percentOfWrongImagesPerCity={percentOfWrongImagesPerCity}/>}\n      <section className='list_of_cities'>\n        {renderCities()}\n      </section>\n    </main>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}